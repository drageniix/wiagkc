{"version":3,"sources":["webpack:///./src/redux/actions/feed.js","webpack:///./src/components/FeedPage/Feed.jsx","webpack:///./src/pages/FeedPage.jsx"],"names":["io","openSocket","Feed","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","Component","key","value","props","getPosts","posts","react_default","a","createElement","map","post","index","title","creator","name","createdAt","content","PropTypes","array","func","mapDispatchToProps","dispatch","fetch","then","res","json","on","data","action","type","POST","catch","err","setErrors","connect","state","feed","FeedPage","FeedPage_Feed"],"mappings":"4LACA,IAAMA,EAAKC,IAAW,s0BCIf,UAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,mGAAAE,CAAAC,KAAAH,GAAAI,EAAAD,KAAAE,EAAAL,GAAAM,MAAAH,KAAAI,sBAAA,yOAAAC,CAAAR,EAA0BS,kBAA1BT,KAAA,EAAAU,IAAA,oBAAAC,MAAA,WAOQR,KAAKS,MAAMC,aAPnB,CAAAH,IAAA,SAAAC,MAAA,WAUa,IACGG,EAAUX,KAAKS,MAAfE,MAER,OACIC,EAAAC,EAAAC,cAAA,WACKH,EAAMI,IAAI,SAACC,EAAMC,GAAP,OACPL,EAAAC,EAAAC,cAAA,OAAKP,IAAKU,GACNL,EAAAC,EAAAC,cAAA,UAAKE,EAAKE,OACVN,EAAAC,EAAAC,cAAA,UAAKE,EAAKG,QAAQC,MAClBR,EAAAC,EAAAC,cAAA,UAAKE,EAAKK,WACVT,EAAAC,EAAAC,cAAA,SAAIE,EAAKM,6CApBjCzB,EAAA,KAAaA,kBACU,CACfc,MAAOY,IAAUC,MACjBd,SAAUa,IAAUE,mGAyB5B,IAIMC,EAAqB,CACvBhB,SD7BoB,kBAAM,SAAAiB,GAC1BC,MAAM,0CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFpC,EAAGqC,GAAG,QAAS,SAAAC,GACX,OAAQA,EAAKC,QACT,IAAK,SACDP,EAAS,CAAEQ,KAAM,cAAeC,KAAMH,EAAKjB,OAC3C,MACJ,IAAK,SACDW,EAAS,CAAEQ,KAAM,cAAeC,KAAMH,EAAKjB,OAC3C,MACJ,IAAK,SACDW,EAAS,CAAEQ,KAAM,cAAeC,KAAMH,EAAKjB,UAOvDW,EAAS,CACLQ,KAAM,YACNxB,MAAOoB,EAAKpB,UAGnB0B,MAAM,SAAAC,GAAG,OAAIX,EAASY,YAAUD,SCO1BE,cARS,SAAAC,GAAK,MAAK,CAC9B9B,MAAO8B,EAAMC,KAAK/B,QASlBe,EAFWc,CAGb3C,GC5Ba8C,UAZE,WACb,OACI/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8B,EAAD","file":"./scripts/10.js","sourcesContent":["import openSocket from 'socket.io-client';\r\nconst io = openSocket('https://wiakc.herokuapp.com');\r\nimport { setErrors } from './common';\r\n\r\nexport const setPost = post => ({\r\n    type: 'SET_POST',\r\n    post\r\n});\r\n\r\nexport const getPosts = () => dispatch => {\r\n    fetch('https://wiakc.herokuapp.com/feed/posts')\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            io.on('posts', data => {\r\n                switch (data.action) {\r\n                    case 'create':\r\n                        dispatch({ type: 'CREATE_POST', POST: data.post });\r\n                        break;\r\n                    case 'update':\r\n                        dispatch({ type: 'UPDATE_POST', POST: data.post });\r\n                        break;\r\n                    case 'delete':\r\n                        dispatch({ type: 'DELETE_POST', POST: data.post });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n            dispatch({\r\n                type: 'GET_POSTS',\r\n                posts: json.posts\r\n            });\r\n        })\r\n        .catch(err => dispatch(setErrors(err)));\r\n};\r\n\r\nexport const addPost = data => (dispatch, getState) => {\r\n    const body = JSON.stringify(data);\r\n    fetch('https://wiakc.herokuapp.com/feed/post', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: getState().user.token\r\n        },\r\n        body\r\n    })\r\n        .then(async res => {\r\n            const json = await res.json();\r\n            if (res.status !== 201) {\r\n                dispatch(setErrors(json));\r\n            } else {\r\n                dispatch(setPost(null));\r\n            }\r\n        })\r\n        .catch(err => dispatch(setErrors(err)));\r\n};\r\n\r\nexport const updatePost = data => (dispatch, getState) => {\r\n    const body = JSON.stringify(data);\r\n    fetch('https://wiakc.herokuapp.com/feed/post/' + getState().feed.post._id, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: getState().user.token\r\n        },\r\n        body\r\n    })\r\n        .then(async res => {\r\n            const json = await res.json();\r\n            if (res.status !== 200) {\r\n                dispatch(setErrors(json));\r\n            } else {\r\n                dispatch(setPost(null));\r\n            }\r\n        })\r\n        .catch(err => dispatch(setErrors(err)));\r\n};\r\n\r\nexport const deletePost = () => (dispatch, getState) =>\r\n    fetch('https://wiakc.herokuapp.com/feed/post/' + getState().feed.post._id, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Authorization: getState().user.token\r\n        }\r\n    })\r\n        .then(async res => {\r\n            const json = await res.json();\r\n            if (res.status !== 200) {\r\n                dispatch(setErrors(json));\r\n            } else {\r\n                dispatch(setPost(null));\r\n            }\r\n        })\r\n        .catch(err => dispatch(setErrors(err)));\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getPosts } from '../../redux/actions/feed';\r\n\r\nexport class Feed extends Component {\r\n    static propTypes = {\r\n        posts: PropTypes.array,\r\n        getPosts: PropTypes.func\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getPosts();\r\n    }\r\n\r\n    render() {\r\n        const { posts } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {posts.map((post, index) => (\r\n                    <div key={index}>\r\n                        <h1>{post.title}</h1>\r\n                        <h2>{post.creator.name}</h2>\r\n                        <h6>{post.createdAt}</h6>\r\n                        <p>{post.content}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.feed.posts\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getPosts\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Feed);\r\n","import React from 'react';\r\nimport Feed from '../components/FeedPage/Feed';\r\n// import PropTypes from 'prop-types'\r\n\r\nconst FeedPage = () => {\r\n    return (\r\n        <div>\r\n            <Feed />\r\n        </div>\r\n    );\r\n};\r\n\r\n// FeedPage.propTypes = {\r\n\r\n// }\r\n\r\nexport default FeedPage;\r\n"],"sourceRoot":""}