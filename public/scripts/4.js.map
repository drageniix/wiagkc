{"version":3,"sources":["webpack:///./src/components/Modals/EventForm.js"],"names":["AddEvent","_React$Component","props","_this","_classCallCheck","this","_getPrototypeOf","call","_assertThisInitialized","type","e","preventDefault","stopPropagation","parsedDate","date","state","title","details","emphasis","addEvent","updateEvent","deleteEvent","event","Date","now","_inherits","React","Component","key","value","_this2","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","className","react_flatpickr__WEBPACK_IMPORTED_MODULE_3___default","data-enable-time","options","altInput","altFormat","onChange","setState","getTime","target","placeholder","name","checked","onClick","onSumbit","propTypes","PropTypes","object","func","isRequired","connect","common","dispatch","data","setModal"],"mappings":"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","file":"./scripts/4.js","sourcesContent":["//TODO: validation\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Flatpickr from 'react-flatpickr';\r\n\r\nimport 'flatpickr/dist/themes/material_green.css';\r\n\r\nimport {\r\n    addEvent,\r\n    setModal,\r\n    updateEvent,\r\n    deleteEvent\r\n} from '../../redux/common/actions';\r\n\r\nexport class AddEvent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date:\r\n                (this.props.event && this.props.event.date * 1000) ||\r\n                Date.now(),\r\n            title: (this.props.event && this.props.event.title) || '',\r\n            details: (this.props.event && this.props.event.details) || '',\r\n            emphasis: (this.props.event && this.props.event.emphasis) || false\r\n        };\r\n    }\r\n\r\n    onSumbit = type => e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const parsedDate = {\r\n            date: this.state.date / 1000,\r\n            title: this.state.title,\r\n            details: this.state.details,\r\n            emphasis: this.state.emphasis\r\n        };\r\n\r\n        switch (type) {\r\n            case 0:\r\n                this.props.addEvent(parsedDate);\r\n                break;\r\n            case 1:\r\n                this.props.updateEvent(parsedDate);\r\n                break;\r\n            case 2:\r\n                this.props.deleteEvent();\r\n                break;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"event\">\r\n                <div className=\"event__date\">\r\n                    <Flatpickr\r\n                        data-enable-time\r\n                        value={this.state.date}\r\n                        options={{\r\n                            altInput: true,\r\n                            altFormat: 'M J, h:iK'\r\n                        }}\r\n                        onChange={date =>\r\n                            this.setState({ date: date[0].getTime() })\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className=\"event__title\">\r\n                    <input\r\n                        className=\"event__title--input\"\r\n                        value={this.state.title}\r\n                        onChange={e => this.setState({ title: e.target.value })}\r\n                        type=\"text\"\r\n                        placeholder=\"Event Title\"\r\n                        name=\"title\"\r\n                    />\r\n                </div>\r\n                <textarea\r\n                    className=\"event__details\"\r\n                    onChange={e => this.setState({ details: e.target.value })}\r\n                    type=\"text\"\r\n                    placeholder=\"Description\"\r\n                    name=\"details\"\r\n                    value={this.state.details}\r\n                />\r\n                <label className=\"event__major\">\r\n                    <strong>Major Event</strong>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"event__major--input\"\r\n                        checked={this.state.emphasis}\r\n                        onChange={e =>\r\n                            this.setState({ emphasis: e.target.checked })\r\n                        }\r\n                        name=\"emphasis\"\r\n                    />\r\n                </label>\r\n\r\n                {(this.props.event && (\r\n                    <div className=\"event__buttons\">\r\n                        <button\r\n                            className=\"event__submit event__submit--update\"\r\n                            onClick={this.onSumbit(1)}\r\n                        >\r\n                            Update Event\r\n                        </button>\r\n                        <button\r\n                            className=\"event__submit event__submit--delete\"\r\n                            onClick={this.onSumbit(2)}\r\n                        >\r\n                            Delete Event\r\n                        </button>\r\n                    </div>\r\n                )) || (\r\n                    <div className=\"event__buttons\">\r\n                        <button\r\n                            className=\"event__submit event__submit--add\"\r\n                            onClick={this.onSumbit(0)}\r\n                        >\r\n                            Add Event\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    event: state.common.event\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addEvent: data => {\r\n        dispatch(setModal(0));\r\n        dispatch(addEvent(data));\r\n    },\r\n    updateEvent: data => {\r\n        dispatch(setModal(0));\r\n        dispatch(updateEvent(data));\r\n    },\r\n    deleteEvent: () => {\r\n        dispatch(setModal(0));\r\n        dispatch(deleteEvent());\r\n    }\r\n});\r\n\r\nAddEvent.propTypes = {\r\n    event: PropTypes.object,\r\n    addEvent: PropTypes.func.isRequired,\r\n    updateEvent: PropTypes.func.isRequired,\r\n    deleteEvent: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AddEvent);\r\n"],"sourceRoot":""}