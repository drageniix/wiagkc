{"version":3,"sources":["webpack:///./src/redux/selectors/common.js","webpack:///./src/components/Modals/UpdateUser.jsx"],"names":["getErrors","errors","data","reduce","prev","curr","_objectSpread","_defineProperty","param","msg","UpdateUser","_React$Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","email","props","user","name","old_password","password","confirm_password","country","image","e","setState","target","value","preventDefault","updateUser","state","_inherits","React","Component","key","_this$props","_this$state","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","className","htmlFor","onChange","type","placeholder","disabled","onClick","onSumbit","mapDispatchToProps","propTypes","PropTypes","object","func","isRequired","connect","common"],"mappings":"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","file":"./scripts/13.js","sourcesContent":["export const getErrors = errors =>\r\n    errors &&\r\n    errors.data &&\r\n    errors.data.reduce(\r\n        (prev, curr) => ({ ...prev, [curr.param]: curr.msg }),\r\n        {}\r\n    );\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { updateUser } from '../../redux/actions/user';\r\nimport { getErrors } from '../../redux/selectors/common';\r\n\r\nexport class UpdateUser extends React.Component {\r\n    state = {\r\n        email: this.props.user.email,\r\n        name: this.props.user.name,\r\n        old_password: '',\r\n        password: '',\r\n        confirm_password: '',\r\n        country: this.props.user.country,\r\n        image: null\r\n    };\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    onSumbit = e => {\r\n        e.preventDefault();\r\n        this.props.updateUser(this.state);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            errors,\r\n            user: { email }\r\n        } = this.props;\r\n        const {\r\n            name,\r\n            country,\r\n            old_password,\r\n            password,\r\n            confirm_password\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"user\">\r\n                Update Info\r\n                <div className=\"user__input\">\r\n                    <label htmlFor=\"email\" className=\"user__input--title\">\r\n                        Email:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={email}\r\n                        onChange={this.onChange}\r\n                        type=\"email\"\r\n                        placeholder=\"email\"\r\n                        name=\"email\"\r\n                        disabled={true}\r\n                    />\r\n                </div>\r\n                {errors && errors.email && (\r\n                    <p className=\"user__input--invalid\">{errors.email}</p>\r\n                )}\r\n                <div className=\"user__input\">\r\n                    <label\r\n                        htmlFor=\"old_password\"\r\n                        className=\"user__input--title\"\r\n                    >\r\n                        * Current Password:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={old_password}\r\n                        onChange={this.onChange}\r\n                        type=\"password\"\r\n                        placeholder=\"required\"\r\n                        name=\"old_password\"\r\n                    />\r\n                </div>\r\n                {errors && errors.old_password && (\r\n                    <p className=\"user__input--invalid\">\r\n                        {errors.old_password}\r\n                    </p>\r\n                )}\r\n                <div className=\"user__input\">\r\n                    <label htmlFor=\"name\" className=\"user__input--title\">\r\n                        Name:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={name}\r\n                        onChange={this.onChange}\r\n                        type=\"text\"\r\n                        placeholder=\"your name\"\r\n                        name=\"name\"\r\n                    />\r\n                </div>\r\n                {errors && errors.name && (\r\n                    <p className=\"user__input--invalid\">{errors.name}</p>\r\n                )}\r\n                <div className=\"user__input\">\r\n                    <label htmlFor=\"country\" className=\"user__input--title\">\r\n                        Country:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={country}\r\n                        onChange={this.onChange}\r\n                        type=\"text\"\r\n                        placeholder=\"country of origin\"\r\n                        name=\"country\"\r\n                    />\r\n                </div>\r\n                {errors && errors.country && (\r\n                    <p className=\"user__input--invalid\">{errors.country}</p>\r\n                )}\r\n                <div className=\"user__input\">\r\n                    <label htmlFor=\"passowrd\" className=\"user__input--title\">\r\n                        New Password:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={password}\r\n                        onChange={this.onChange}\r\n                        type=\"password\"\r\n                        placeholder=\"optional\"\r\n                        name=\"password\"\r\n                    />\r\n                </div>\r\n                {errors && errors.password && (\r\n                    <p className=\"user__input--invalid\">{errors.password}</p>\r\n                )}\r\n                <div className=\"user__input\">\r\n                    <label\r\n                        htmlFor=\"confirm_password\"\r\n                        className=\"user__input--title\"\r\n                    >\r\n                        Confirm Password:\r\n                    </label>\r\n                    <input\r\n                        className=\"user__input--data\"\r\n                        value={confirm_password}\r\n                        onChange={this.onChange}\r\n                        type=\"password\"\r\n                        placeholder=\"\"\r\n                        name=\"confirm_password\"\r\n                    />\r\n                </div>\r\n                {errors && errors.confirm_password && (\r\n                    <p className=\"user__input--invalid\">\r\n                        {errors.confirm_password}\r\n                    </p>\r\n                )}\r\n                <button className=\"btn btn--login\" onClick={this.onSumbit}>\r\n                    Update\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: getErrors(state.common.errors),\r\n    user: state.user.user\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    updateUser\r\n};\r\n\r\nUpdateUser.propTypes = {\r\n    user: PropTypes.object,\r\n    updateUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UpdateUser);\r\n"],"sourceRoot":""}